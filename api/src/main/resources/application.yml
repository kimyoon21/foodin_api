server:
  port: ${PORT:5000}
spring:
  profiles:
    active: local
  pid:
    file: spring.pid
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 25MB
#  jackson:
#    deserialization:
#      accept-empty-string-as-null-object: true  TODO 작동시켜줘..
  security:
    oauth2:
      client:
        registration:
          email:
            client-name: email
            client-id: foodin
            client-secret: foodin1
            client-authentication-method: basic
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: read
          kakao:
            client-name: kakao
            client-id: b15df9cded81983559f38f41a9229e85
            client-secret: b15df9cded81983559f38f41a9229e85
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile,account_email
          naver:
            client-name: naver
            client-id: xuMQdeR_UZFl1QZoC0hL
            client-secret: UHcmbtnIUI
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile,account_email
          facebook:
            client-name: facebook
            clientId: 735761390135432
            clientSecret: a1c8f75125fa036e84df64eb2f16de43
            scope: public_profile,email
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          email:
            authorization-uri: http://localhost:5000/oauth/authorize
            token-uri: http://localhost:5000/oauth/token
            user-info-uri: http://localhost:5000/user/me
            user-name-attribute: realName
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          facebook:
            authorization-uri: https://www.facebook.com/dialog/oauth
            token-uri: https://graph.facebook.com/oauth/access_token
            user-info-uri: https://graph.facebook.com/me


  config:
    name: entity
#  jpa:
#    properties:
#      hibernate.show_sql: true
#      hibernate.format_sql: true

messages:
  basename: messages
  encoding: utf-8

logging:
  level:
    org.springframework: INFO
    com.zaxxer.hikari.HikariConfig: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console : "%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%16.16t]){faint} %clr(%-40.40logger{39}){cyan} %clr([%3.3L]){blue} %clr(:){faint} %m%n"
#    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta}  %clr(---){faint} [%thread, %X{x-request-uid:--}, %X{sessionId:--}] %clr(%logger{35}){cyan} %clr(:){faint} %msg %n"
  path: /var/log


---
spring:
  profiles: test
server:
  address: 127.0.0.1
  port: ${PORT:5000}

---
spring:
  profiles: prod
server:
  address: 127.0.0.1
  port: ${PORT:5000}
