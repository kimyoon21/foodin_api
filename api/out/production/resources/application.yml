server:
  port: 8080
spring:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
  pid:
    file: spring.pid
    resources:
      cache-period: 3600
  security:
    user:
      name: user
      password: test
    oauth2:
      client:
#    oauth2:
#      client:
#        registration:
#          my-client:
#            client-name: foodin-api
#            client-id: foodin
#            client-secret: foodin1
#            client-authentication-method: basic
#            authorization-grant-type: authorization_code
#            redirect-uri-template: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: read
#        provider:
#          my-client:
#            authorization-uri: http://localhost:8080/oauth/authorize
#            token-uri: http://localhost:8080/oauth/token
#            user-info-uri: http://localhost:8080/me
#            user-name-attribute: name

logging:
  level:
    org.springframework: INFO
  pattern:
    # default : %clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5level) %clr(${PID:- }){magenta}  %clr(---){faint} [%thread, %X{x-request-uid:--}, %X{sessionId:--}] %clr(%logger{35}){cyan} %clr(:){faint} %msg %n"
